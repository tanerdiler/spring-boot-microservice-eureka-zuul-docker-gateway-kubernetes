x-logging: &default-logging
  driver: loki
  options:
    loki-url: 'http://localhost:3100/api/prom/push'
    loki-pipeline-stages: |
      - multiline:
          firstline: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}.\d{3}'
          max_wait_time: 3s
      - regex:
          expression: '^(?P<date>\d{4}-\d{2}-\d{2}) (?P<time>\d{2}:\d{2}:\d{2}.\d{3}) (?P<message>(?s:.*))$$'

version: '3.4'
services:

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.8.0
    container_name: service-elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - node.name=elasticsearch
      - cluster.name=es-docker-cluster
      #- cluster.initial_master_nodes=elasticsearch
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
#    mem_limit: 500m
#    cap_add:
#      - IPC_LOCK
    volumes:
      - ./elasticsearch/data:/usr/share/elasticsearch/data:rw

  kibana:
    image: docker.elastic.co/kibana/kibana:7.8.0
    container_name: service-kibana
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      - elasticsearch

  logstash:
    image: docker.elastic.co/logstash/logstash:7.8.0
    container_name: service-logstash
    restart: unless-stopped
    command: logstash -f /usr/share/logstash/pipeline
    volumes:
      - ./containerized-logstash/config:/usr/share/logstash/config:ro
      - ./containerized-logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5000:5000"
      - "12204:12204"
    depends_on:
      - elasticsearch

  zipkin:
    image: openzipkin/zipkin:latest
    container_name: service-zipkin
    ports:
      - 9411:9411
    command: --logging.level.zipkin2=TRACE
#   cassandra-node-1:
#     hostname: cassandra-1
#     image: cassandra:latest
#     command: /bin/bash -c "sleep 1 && echo ' -- Pausing to let system catch up ... -->' && /docker-entrypoint.sh cassandra -f"
#     expose:
#       - 7000
#       - 7001
#       - 7199
#       - 9042
#       - 9160
#  cassandra-node-2:
#    hostname: cassandra-2
#    image: cassandra:latest
#    command: /bin/bash -c "sleep 30 && echo ' -- Pausing to let system catch up ... -->' && /docker-entrypoint.sh cassandra -f"
#    links:
#      - cassandra-node-1:cassandra
#    expose:
#      - 7000
#      - 7001
#      - 7199
#      - 9042
#      - 9160

  loki:
    image: grafana/loki:2.8.2
    container_name: loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"

  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./containerized-prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml:rw
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --enable-feature=exemplar-storage
    depends_on:
      - loki
    logging: *default-logging

  tempo:
    image: grafana/tempo:2.1.1
    container_name: tempo
    command: [ "--target=all", "--storage.trace.backend=local", "--storage.trace.local.path=/var/tempo", "--auth.enabled=false" ]
    ports:
      - "14250:14250"
      - "4317:4317"
    depends_on:
      - loki
    logging: *default-logging

  grafana:
    image: grafana/grafana:9.4.13
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./containerized-grafana/etc/grafana/:/etc/grafana/provisioning/datasources
      - ./containerized-grafana/etc/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ./containerized-grafana/etc/dashboards:/etc/grafana/dashboards
    depends_on:
      - loki
      - prometheus
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Admin"
      GF_AUTH_DISABLE_LOGIN_FORM: "true"
    logging: *default-logging


  discovery:
    image: tanerdiler/service-discovery
    container_name: service-discovery
    build:
      context: ./containerized-discovery
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    depends_on:
      - logstash
    links:
      - logstash
    logging: *default-logging

  service-accounts:
    image: tanerdiler/service-accounts-api
    container_name: service-accounts
    build:
      context: ./containerized-accounts
      dockerfile: Dockerfile
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4317
      - OTEL_RESOURCE_ATTRIBUTES=service.name=service-accounts,compose_service=service-accounts
      - OTEL_METRICS_EXPORTER=none
      - MANAGEMENT_METRICS_TAGS_APPLICATION=service-accounts
      - management.zipkin.tracing.endpoint=http://zipkin:9411/api/v2/spans
      - management.tracing.sampling.probability=1.0
    ports:
      - "7500:2222"
    links:
      - discovery
      - logstash
    logging: *default-logging

  service-products:
    image: tanerdiler/service-products-api
    container_name: service-products
    build:
      context: ./containerized-products
      dockerfile: Dockerfile
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4317
      - OTEL_RESOURCE_ATTRIBUTES=service.name=service-products,compose_service=service-products
      - OTEL_METRICS_EXPORTER=none
      - MANAGEMENT_METRICS_TAGS_APPLICATION=service-products
      - management.zipkin.tracing.endpoint=http://zipkin:9411/api/v2/spans
      - management.tracing.sampling.probability=1.0
    ports:
      - "7501:2222"
    depends_on:
      - discovery
      - service-accounts
    links:
      - discovery
      - logstash
    logging: *default-logging

  service-orders:
    image: tanerdiler/service-orders-api
    container_name: service-orders
    build:
      context: ./containerized-orders
      dockerfile: Dockerfile
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4317
      - OTEL_RESOURCE_ATTRIBUTES=service.name=service-orders,compose_service=service-orders
      - OTEL_METRICS_EXPORTER=none
      - MANAGEMENT_METRICS_TAGS_APPLICATION=service-orders
      - management.zipkin.tracing.endpoint=http://zipkin:9411/api/v2/spans
      - management.tracing.sampling.probability=1.0
    ports:
      - "7502:2222"
    depends_on:
      - discovery
      - service-products
    links:
      - discovery
      - logstash
    logging: *default-logging

  service-main:
    image: tanerdiler/service-main-api
    container_name: service-main
    build:
      context: ./containerized-main
      dockerfile: Dockerfile
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4317
      - OTEL_RESOURCE_ATTRIBUTES=service.name=service-main,compose_service=service-main
      - OTEL_METRICS_EXPORTER=none
      - MANAGEMENT_METRICS_TAGS_APPLICATION=service-main
      - management.zipkin.tracing.endpoint=http://zipkin:9411/api/v2/spans
      - management.tracing.sampling.probability=1.0
    ports:
      - "7503:2222"
    depends_on:
      - discovery
      - service-orders
    links:
      - discovery
      - logstash
      - service-accounts
      - service-products
      - service-orders
    logging: *default-logging

  service-gateway:
    image: tanerdiler/service-gateway
    container_name: service-gateway
    build:
      context: ./containerized-gateway
      dockerfile: Dockerfile
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4317
      - OTEL_RESOURCE_ATTRIBUTES=service.name=service-gateway,compose_service=service-gateway
      - OTEL_METRICS_EXPORTER=none
      - MANAGEMENT_METRICS_TAGS_APPLICATION=service-gateway
    ports:
      - "8762:8762"
    links:
      - discovery
      - logstash
    logging: *default-logging


